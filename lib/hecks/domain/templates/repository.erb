
module <%= @aggregate.domain.name %>
  module Domain
    module <%= @aggregate.name %>
      class <%= @name %>
        class Repository
          include Singleton
          def self.save(object)
            instance.save(object)
          end

          def self.fetch(<%= @name.to_s.underscore %>)
            instance.fetch(<%= @name.to_s.underscore %>)
          end

          def initialize
            @objects = {}
          end

          def self.create(<%= @name.to_s.underscore %>)
            instance.create(<%= @name.to_s.underscore %>)
          end

          def self.all
            @objects.values
          end

          def create(<%= @name.to_s.underscore %>)
            klass = self.class.const_get(
              self.class.to_s.gsub('::Repository', '')
            )
            domain_object = klass.default(<%= @name.to_s.underscore %>)
            domain_object.tap(&:save)
          end

          def fetch(fetchable)
            return @objects[fetchable.id] if fetchable.respond_to?(:id)

            @objects[fetchable]
          end

          def save(<%= @name.to_s.underscore %>)
            domain_object = <%= @name.to_s.underscore %>
            @objects[<%= @name.to_s.underscore %>.hash] = domain_object

            <%= @name.to_s.underscore %>.instance_eval do
              @id = <%= @name.to_s.underscore %>.hash
            end

            <%= @name.to_s.underscore %>
          end
        end
      end
    end
  end
end